# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.1.0
  codecov: codecov/codecov@3.2.4

jobs:
  test:
    parameters:
      node-version:
        default: "lts"
        description: The target version of Node.js to run tests against.
        type: string
      mocha-version:
        default: "9"
        description: The target version of Mocha to run tests against.
        type: string
      slonik-version:
        description: The target version of Slonik to run tests against.
        type: string
    docker:
      - image: cimg/node:<< parameters.node-version >>
      - image: cimg/postgres:13.8
        environment:
          POSTGRES_PASSWORD: circleci_test
    working_directory: ~/mocha-slonik
    steps:
      - add_ssh_keys:
          fingerprints:
            - "f7:6a:1f:f9:d3:1c:05:40:ae:3c:e3:0f:9a:7e:9a:a8"
      - checkout
      - when:
          condition:
            equal: [ "14.21", << parameters.node-version >> ]
          steps:
            - run:
                name: Update NPM to v8
                command: npm install -g npm@8
      - node/install-packages:
          cache-version: v2
      - run:
          name: Install Slonik v<< parameters.slonik-version >> & Mocha v<< parameters.mocha-version >>
          command: npm i slonik@<< parameters.slonik-version >> mocha@<< parameters.mocha-version >>
      - run:
          name: Compile TypeScript
          command: npm run build
      - run:
          name: Run tests
          command: |
            npm run test:coverage
            mkdir -p coverage
            npx nyc report --reporter=json > coverage/coverage.json
          environment:
            DATABASE_URL: postgres://postgres:circleci_test@localhost:5432/circle_test
      - codecov/upload

  build:
    docker:
      - image: cimg/node:lts
    working_directory: ~/mocha-slonik
    steps:
      - checkout
      - node/install-npm
      - node/install-packages
      - run:
          name: Build package
          command: |
            mkdir package
            npm pack --pack-destination package
      - persist_to_workspace:
          root: .
          paths:
            - "*"
      - store_artifacts:
          path: package
          destination: .
  publish:
    docker:
      - image: cimg/node:lts
    working_directory: ~/mocha-slonik
    steps:
      - attach_workspace:
          at: ~/mocha-slonik
      - run:
          name: Set NPM token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - run: npm publish
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run: npm publish --dry-run
  release:
    docker:
      - image: cimg/node:lts
    working_directory: ~/mocha-slonik
    steps:
      - add_ssh_keys:
          fingerprints:
            - "f7:6a:1f:f9:d3:1c:05:40:ae:3c:e3:0f:9a:7e:9a:a8"
      - checkout
      - run:
          name: Import GPG key
          command: echo -e "${GPG_KEY}" | base64 -d | gunzip | gpg --batch --yes --import
      - run:
          name: Set up GPG Script
          command: |
            echo '/usr/bin/gpg --batch --no-tty --passphrase ${GPG_PASSPHRASE} --pinentry-mode loopback "$@"' > /tmp/gpg-with-passphrase
            chmod +x /tmp/gpg-with-passphrase
      - run:
          name: Configure Git client
          command: |
            git config gpg.program "/tmp/gpg-with-passphrase"
            git config commit.gpgsign true
            git config --global user.signingkey ${GPG_KEY_ID}
            git config --global user.email bot@andrewjo.com
            git config --global user.name "Semantic Release Bot"
      - node/install-packages
      - run:
          name: Run semantic-release
          command: npm run semantic-release

workflows:
  build-and-release:
    jobs:
      - test:
          name: test-node-v<< matrix.node-version>>-mocha-v<< matrix.mocha-version >>-slonik-v<< matrix.slonik-version >>
          context: test
          filters:
            tags:
              only: /v\d+(?:\.\d+){0,2}(?:-\w+(?:\.\w+)*){0,1}/
          matrix:
            parameters:
              node-version: ["16.20", "18.18"]
              mocha-version: ["10"]
              slonik-version: ["34.3.0", "35.2.1"]
      - release:
          context:
            - npm
            - semantic-release
          requires:
            - test
